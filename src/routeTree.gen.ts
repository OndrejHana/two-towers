/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LobbyImport } from './routes/lobby'
import { Route as IndexImport } from './routes/index'
import { Route as LobbyNewImport } from './routes/lobby/new'
import { Route as LobbyIdImport } from './routes/lobby/$id'

// Create/Update Routes

const LobbyRoute = LobbyImport.update({
  id: '/lobby',
  path: '/lobby',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LobbyNewRoute = LobbyNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => LobbyRoute,
} as any)

const LobbyIdRoute = LobbyIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => LobbyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/lobby': {
      id: '/lobby'
      path: '/lobby'
      fullPath: '/lobby'
      preLoaderRoute: typeof LobbyImport
      parentRoute: typeof rootRoute
    }
    '/lobby/$id': {
      id: '/lobby/$id'
      path: '/$id'
      fullPath: '/lobby/$id'
      preLoaderRoute: typeof LobbyIdImport
      parentRoute: typeof LobbyImport
    }
    '/lobby/new': {
      id: '/lobby/new'
      path: '/new'
      fullPath: '/lobby/new'
      preLoaderRoute: typeof LobbyNewImport
      parentRoute: typeof LobbyImport
    }
  }
}

// Create and export the route tree

interface LobbyRouteChildren {
  LobbyIdRoute: typeof LobbyIdRoute
  LobbyNewRoute: typeof LobbyNewRoute
}

const LobbyRouteChildren: LobbyRouteChildren = {
  LobbyIdRoute: LobbyIdRoute,
  LobbyNewRoute: LobbyNewRoute,
}

const LobbyRouteWithChildren = LobbyRoute._addFileChildren(LobbyRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/lobby': typeof LobbyRouteWithChildren
  '/lobby/$id': typeof LobbyIdRoute
  '/lobby/new': typeof LobbyNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/lobby': typeof LobbyRouteWithChildren
  '/lobby/$id': typeof LobbyIdRoute
  '/lobby/new': typeof LobbyNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/lobby': typeof LobbyRouteWithChildren
  '/lobby/$id': typeof LobbyIdRoute
  '/lobby/new': typeof LobbyNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/lobby' | '/lobby/$id' | '/lobby/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/lobby' | '/lobby/$id' | '/lobby/new'
  id: '__root__' | '/' | '/lobby' | '/lobby/$id' | '/lobby/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LobbyRoute: typeof LobbyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LobbyRoute: LobbyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/lobby"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/lobby": {
      "filePath": "lobby.tsx",
      "children": [
        "/lobby/$id",
        "/lobby/new"
      ]
    },
    "/lobby/$id": {
      "filePath": "lobby/$id.tsx",
      "parent": "/lobby"
    },
    "/lobby/new": {
      "filePath": "lobby/new.tsx",
      "parent": "/lobby"
    }
  }
}
ROUTE_MANIFEST_END */
